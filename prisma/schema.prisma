// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model Account {
  id                String  @id @default(cuid())
  userId            String  @map("user_id")
  type              String
  provider          String
  providerAccountId String  @map("provider_account_id")
  refresh_token     String? @db.Text
  access_token      String? @db.Text
  expires_at        Int?
  token_type        String?
  scope             String?
  id_token          String? @db.Text
  session_state     String?

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
  @@map("accounts")
}

model Session {
  id           String   @id @default(cuid())
  sessionToken String   @unique @map("session_token")
  userId       String   @map("user_id")
  expires      DateTime
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@map("sessions")
}

model User {
  id              String    @id @default(cuid())
  createdAt       DateTime  @default(now())
  name            String?
  username        String?   @unique
  email           String?   @unique
  phone           String?
  state           String?
  city            String?
  street          String?
  address         String?
  password        String
  confirmPassword String?
  gender          String?
  isAdmin         Boolean   @default(false)
  emailVerified   DateTime? @map("email_verified")
  image           String?
  accounts        Account[]
  sessions        Session[]
  Order           Order[]
  Review          Review[]

  @@map("users")
}

model VerificationToken {
  identifier String
  token      String
  expires    DateTime

  @@unique([identifier, token])
  @@map("verificationtokens")
}

model Product {
  id              String   @id @default(cuid())
  createdAt       DateTime @default(now())
  name            String   @unique
  desc            String
  image           String
  price           Int
  ingredients     String[]
  isFeatured      Boolean  @default(false)
  ratingsAverage  Int      @default(0)
  ratingsQuantity Int      @default(0)
  likes           String[]
  reviews         Review[]

  @@map("products")
}

model Review {
  id        String   @id @default(cuid())
  createdAt DateTime @default(now())
  rating    Int
  desc      String
  product   Product  @relation(fields: [productId], references: [id])
  productId String   @map("product_id")
  user      User     @relation(fields: [userId], references: [id])
  userId    String   @map("user_id")
  consent   Boolean  @default(false)

  @@map("reviews")
}

model Order {
  id        String   @id @default(cuid())
  createdAt DateTime @default(now())
  price     Int
  products  Json[]
  status    String
  intent_id String?  @unique
  user      User     @relation(fields: [userId], references: [id])
  userId    String   @map("user_id")

  @@map("orders")
}
